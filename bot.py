import telebot
import pandas as pd
import sqlite3
import re
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import random

TOKEN = 'your-token'
bot = telebot.TeleBot(TOKEN)

conn = sqlite3.connect('sites.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS sites (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT,
    url TEXT,
    xpath TEXT
)''')
conn.commit()

@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å Excel-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–∞–π—Ç–∞—Ö.", reply_markup=markup)

@bot.message_handler(content_types=['document'])
def handle_document(message):
    if message.document.mime_type == 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        with open('uploaded_file.xlsx', 'wb') as new_file:
            new_file.write(downloaded_file)
        
        df = pd.read_excel('uploaded_file.xlsx')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –≤ Markdown
        response = "üìã **–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:**\n\n"
        response += "```\n"
        response += f"{'–ù–∞–∑–≤–∞–Ω–∏–µ':<12} | {'URL':<60} | {'XPath'}\n"
        response += "-" * 90 + "\n"
        for index, row in df.iterrows():
            title = str(row['title'])[:12].ljust(12)  # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            url = str(row['url'])[:60] + ("..." if len(str(row['url'])) > 60 else "")  # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º URL
            xpath = str(row['xpath'])
            response += f"{title} | {url:<60} | {xpath}\n"
        response += "```\n"
        
        bot.send_message(message.chat.id, response, parse_mode='Markdown')
        
        for index, row in df.iterrows():
            cursor.execute('INSERT INTO sites (title, url, xpath) VALUES (?, ?, ?)', 
                           (row['title'], row['url'], row['xpath']))
        conn.commit()
        
        bot.send_message(message.chat.id, "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π `/average_price` –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã.", parse_mode='Markdown')
    else:
        bot.send_message(message.chat.id, "‚ùå –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx).", parse_mode='Markdown')
def parse_price(url, xpath):
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Selenium, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ü–µ–Ω—ã –ø–æ–¥–≥—Ä—É–∂–∞—é—Ç—Å—è –≤ JS
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36")
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option('useAutomationExtension', False)

        service = Service(executable_path="your-path")  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ chromedriver.exe
        driver = webdriver.Chrome(service=service, options=chrome_options)   

        print(f"–ó–∞–ø—Ä–æ—Å –∫ {url}")
        driver.get(url)
        
        # –°–ª—É—á–∞–π–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ 
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight / 2);")
        time.sleep(random.uniform(2, 4))
        
        # –ñ–¥–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        try:
            price_elements = WebDriverWait(driver, 5).until(
                EC.presence_of_all_elements_located((By.XPATH, xpath))
            )
            print(f"–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ XPath '{xpath}': {len(price_elements)}")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ XPath '{xpath}': {str(e)}")
            driver.quit()
            return []

        prices = []
        for i, elem in enumerate(price_elements):
            price_text = elem.text.strip()
            price_text = re.sub(r'[^\d]', '', price_text)
            if price_text:
                price = float(price_text)
                prices.append(price)
        print(f"–ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ü–µ–Ω: {prices}")
        driver.quit()
        return prices
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {url}: {e}")
        driver.quit()
        return []

@bot.message_handler(commands=['average_price'])
def average_price(message):
    cursor.execute('SELECT title, url, xpath FROM sites')
    sites = cursor.fetchall()
    
    for site in sites:
        title, url, xpath = site
        prices = parse_price(url, xpath)
        if prices:
            avg_price = sum(prices) / len(prices)
            bot.send_message(message.chat.id, f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –Ω–∞ {title}: {avg_price:.2f} —Ä—É–±.")
        else:
            bot.send_message(message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ü–µ–Ω—ã –Ω–∞ {title} (–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π XPath).")

def test():
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    sites = [
        ("M.Video –ü–æ–∏—Å–∫", "https://www.mvideo.ru/product-list-page?q=–∞–π—Ñ–æ–Ω+15", "//span[contains(@class, 'price__main')]"),
        ("Ozon –ü–æ–∏—Å–∫", "https://www.ozon.ru/category/smartfony-15502/apple-26303000/?text=–∞–π—Ñ–æ–Ω+15", "//span[contains(@class, 'c3025-b1')]")
    ]

    for title, url, xpath in sites:
        print(f"\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {title}:")
        prices = parse_price(url, xpath)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {prices}")


if __name__ == '__main__':
    bot.polling(none_stop=True)